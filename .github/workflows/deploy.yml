name: Deploy Terraform
'on':
  release:
    types:
      - prereleased
      - released
  repository_dispatch:
    types:
      - deploy
env:
  NODE_VER: 14.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TOOLBOX: $(npm bin)/toolbox
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  RUN_PRE_DEPLOY: ''
  RUN_POST_DEPLOY: ''
  RUN_TF_DEPLOY: false
  RUN_S3_UPLOAD: true
  RUN_CF_INVALIDATE: true
  RUN_HEALTHCHECK: false
  RUN_DEPLOYMENT_REPORT: false
jobs:
  develop:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - develop
      fail-fast: false
    env:
      TB_DR: ${{ matrix.dr }}
      TB_ENVIRONMENT: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v2.3.4
        id: checkout
      - uses: actions/setup-node@v2.1.5
        id: setup_node
        with:
          node-version: ${{ matrix.node-version }}
      - name: setup cache for node
        uses: actions/cache@v2.1.4
        id: setup_cache_node
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14
      - name: setup cache for terraform
        uses: actions/cache@v2.1.4
        id: setup_cache_terraform
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl')
            }}
          restore-keys: ${{ runner.os }}-terraform-
      - name: Install Npm Dependencies
        id: npm_install
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: npm ci
      - name: Build Sources
        id: build
        run: npm run build
      - name: Configure AWS Credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Run Custom Process before Deployment
        id: run_pre_deploy
        if: ${{ env.RUN_PRE_DEPLOY != '' }}
        run: ${{ env.RUN_PRE_DEPLOY }}
      - name: Apply Terraform Stacks
        id: terraform_apply
        if: ${{ env.RUN_TF_DEPLOY == 'true' }}
        run: |
          echo "Deploy to: $TB_ENVIRONMENT"
          ${{ env.TOOLBOX }} terraform apply --plan
      - name: Execute toolbox s3 upload
        id: s3_upload
        if: ${{ env.RUN_S3_UPLOAD == 'true' }}
        run: ${{ env.TOOLBOX }} s3 upload
      - name: Invalidate Cloudfront Distribution
        id: cf_invalidate
        if: ${{ env.RUN_CF_INVALIDATE == 'true' }}
        run: ${{ env.TOOLBOX }} cloudfront invalidate
      - name: Run Custom Process after Deployment
        id: run_post_deploy
        if: ${{ env.RUN_POST_DEPLOY != '' }}
        run: ${{ env.RUN_POST_DEPLOY }}
      - name: Register Healthcheck
        id: register_healthcheck
        if: ${{ env.RUN_HEALTHCHECK == 'true' }}
        run: |
          echo https://dashboard.live.spoc.cloud.otto.de/dashboard
          ${{ env.TOOLBOX }} healthcheck register
      - name: Report Deployment
        id: deployment_report
        if: ${{ env.RUN_DEPLOYMENT_REPORT == 'true' }}
        run: |
          echo "https://deployment-report.live.qs.cloud.otto.de/ui/index.html"
          ${{ env.TOOLBOX }} deployment-report send
      - name: Destroy Deployment Admin
        id: terraform_destroy
        if: ${{ env.RUN_TF_DEPLOY == 'true' && always() }}
        run: ${{ env.TOOLBOX }} terraform destroy -g admin
  live:
    needs:
      - develop
    if: '!!github.event.release && !github.event.release.prerelease'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - live
      fail-fast: false
    env:
      TB_DR: ${{ matrix.dr }}
      TB_ENVIRONMENT: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v2.3.4
        id: checkout
      - uses: actions/setup-node@v2.1.5
        id: setup_node
        with:
          node-version: ${{ matrix.node-version }}
      - name: setup cache for node
        uses: actions/cache@v2.1.4
        id: setup_cache_node
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14
      - name: setup cache for terraform
        uses: actions/cache@v2.1.4
        id: setup_cache_terraform
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl')
            }}
          restore-keys: ${{ runner.os }}-terraform-
      - name: Install Npm Dependencies
        id: npm_install
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: npm ci
      - name: Build Sources
        id: build
        run: npm run build
      - name: Configure AWS Credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Run Custom Process before Deployment
        id: run_pre_deploy
        if: ${{ env.RUN_PRE_DEPLOY != '' }}
        run: ${{ env.RUN_PRE_DEPLOY }}
      - name: Apply Terraform Stacks
        id: terraform_apply
        if: ${{ env.RUN_TF_DEPLOY == 'true' }}
        run: |
          echo "Deploy to: $TB_ENVIRONMENT"
          ${{ env.TOOLBOX }} terraform apply --plan
      - name: Execute toolbox s3 upload
        id: s3_upload
        if: ${{ env.RUN_S3_UPLOAD == 'true' }}
        run: ${{ env.TOOLBOX }} s3 upload
      - name: Invalidate Cloudfront Distribution
        id: cf_invalidate
        if: ${{ env.RUN_CF_INVALIDATE == 'true' }}
        run: ${{ env.TOOLBOX }} cloudfront invalidate
      - name: Run Custom Process after Deployment
        id: run_post_deploy
        if: ${{ env.RUN_POST_DEPLOY != '' }}
        run: ${{ env.RUN_POST_DEPLOY }}
      - name: Register Healthcheck
        id: register_healthcheck
        if: ${{ env.RUN_HEALTHCHECK == 'true' }}
        run: |
          echo https://dashboard.live.spoc.cloud.otto.de/dashboard
          ${{ env.TOOLBOX }} healthcheck register
      - name: Report Deployment
        id: deployment_report
        if: ${{ env.RUN_DEPLOYMENT_REPORT == 'true' }}
        run: |
          echo "https://deployment-report.live.qs.cloud.otto.de/ui/index.html"
          ${{ env.TOOLBOX }} deployment-report send
      - name: Destroy Deployment Admin
        id: terraform_destroy
        if: ${{ env.RUN_TF_DEPLOY == 'true' && always() }}
        run: ${{ env.TOOLBOX }} terraform destroy -g admin
