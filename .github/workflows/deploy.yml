name: Deploy Terraform
'on':
  release:
    types:
      - prereleased
      - released
  repository_dispatch:
    types:
      - deploy
env:
  NODE_VER: 14.x
  GITHUB_TOKEN: '${{ secrets.TOKEN_GITHUB }}'
  TOOLBOX: $(npm bin)/toolbox
  APK_PACKAGES: jq nodejs npm
  RUN_PRE_DEPLOY: ''
  RUN_POST_DEPLOY: ''
  RUN_TF_DEPLOY: false
  RUN_S3_UPLOAD: true
  RUN_CF_INVALIDATE: true
  RUN_HEALTHCHECK: false
  RUN_DEPLOYMENT_REPORT: false
jobs:
  develop:
    runs-on: ubuntu-latest
    container: 'hashicorp/terraform:latest'
    strategy:
      matrix:
        target:
          - develop
      fail-fast: false
    env:
      TB_DR: '${{ matrix.dr }}'
      TB_ENVIRONMENT: '${{ matrix.target }}'
    steps:
      - name: 'Install APK Packages: ${{ env.APK_PACKAGES }}'
        run: 'apk add --no-progress ${{ env.APK_PACKAGES }}'
      - uses: actions/checkout@v2.3.4
      - name: 'Use Node.js ${{ env.NODE_VER }}'
        uses: actions/setup-node@v2.1.3
        with:
          node-version: '${{ env.NODE_VER }}'
      - name: Setup Npm Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: '${{ runner.os }}-node-${{ hashFiles(''**/package-lock.json'') }}'
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Package Dependencies
        run: npm ci
      - name: Build Sources
        run: npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: eu-central-1
      - name: Run Custom Process before Deployment
        if: '${{ env.RUN_PRE_DEPLOY != '''' }}'
        run: '${{ env.RUN_PRE_DEPLOY }}'
      - name: Apply Terraform Stacks
        if: '${{ env.RUN_TF_DEPLOY == ''true'' }}'
        run: |
          echo "Deploy to: $TB_ENVIRONMENT"
          ${{ env.TOOLBOX }} terraform apply --plan
      - name: Execute toolbox s3 upload
        if: '${{ env.RUN_S3_UPLOAD == ''true'' }}'
        run: '${{ env.TOOLBOX }} s3 upload'
      - name: Invalidate Cloudfront Distribution
        if: '${{ env.RUN_CF_INVALIDATE == ''true'' }}'
        run: '${{ env.TOOLBOX }} cloudfront invalidate'
      - name: Run Custom Process after Deployment
        if: '${{ env.RUN_POST_DEPLOY != '''' }}'
        run: '${{ env.RUN_POST_DEPLOY }}'
      - name: Register Healthcheck
        if: '${{ env.RUN_HEALTHCHECK == ''true'' }}'
        run: |
          echo https://dashboard.live.spoc.cloud.otto.de/dashboard
          ${{ env.TOOLBOX }} healthcheck register
      - name: Report Deployment
        if: '${{ env.RUN_DEPLOYMENT_REPORT == ''true'' }}'
        run: |
          echo "https://deployment-report.live.qs.cloud.otto.de/ui/index.html"
          ${{ env.TOOLBOX }} deployment-report send
      - name: Destroy Deployment Admin
        if: '${{ env.RUN_TF_DEPLOY == ''true'' && always() }}'
        run: '${{ env.TOOLBOX }} terraform destroy -g admin'
  live:
    needs:
      - develop
    if: '!!github.event.release && !github.event.release.prerelease'
    runs-on: ubuntu-latest
    container: 'hashicorp/terraform:latest'
    strategy:
      matrix:
        target:
          - live
      fail-fast: false
    env:
      TB_DR: '${{ matrix.dr }}'
      TB_ENVIRONMENT: '${{ matrix.target }}'
    steps:
      - name: 'Install APK Packages: ${{ env.APK_PACKAGES }}'
        run: 'apk add --no-progress ${{ env.APK_PACKAGES }}'
      - uses: actions/checkout@v2.3.4
      - name: 'Use Node.js ${{ env.NODE_VER }}'
        uses: actions/setup-node@v2.1.3
        with:
          node-version: '${{ env.NODE_VER }}'
      - name: Setup Npm Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: '${{ runner.os }}-node-${{ hashFiles(''**/package-lock.json'') }}'
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Package Dependencies
        run: npm ci
      - name: Build Sources
        run: npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: eu-central-1
      - name: Run Custom Process before Deployment
        if: '${{ env.RUN_PRE_DEPLOY != '''' }}'
        run: '${{ env.RUN_PRE_DEPLOY }}'
      - name: Apply Terraform Stacks
        if: '${{ env.RUN_TF_DEPLOY == ''true'' }}'
        run: |
          echo "Deploy to: $TB_ENVIRONMENT"
          ${{ env.TOOLBOX }} terraform apply --plan
      - name: Execute toolbox s3 upload
        if: '${{ env.RUN_S3_UPLOAD == ''true'' }}'
        run: '${{ env.TOOLBOX }} s3 upload'
      - name: Invalidate Cloudfront Distribution
        if: '${{ env.RUN_CF_INVALIDATE == ''true'' }}'
        run: '${{ env.TOOLBOX }} cloudfront invalidate'
      - name: Run Custom Process after Deployment
        if: '${{ env.RUN_POST_DEPLOY != '''' }}'
        run: '${{ env.RUN_POST_DEPLOY }}'
      - name: Register Healthcheck
        if: '${{ env.RUN_HEALTHCHECK == ''true'' }}'
        run: |
          echo https://dashboard.live.spoc.cloud.otto.de/dashboard
          ${{ env.TOOLBOX }} healthcheck register
      - name: Report Deployment
        if: '${{ env.RUN_DEPLOYMENT_REPORT == ''true'' }}'
        run: |
          echo "https://deployment-report.live.qs.cloud.otto.de/ui/index.html"
          ${{ env.TOOLBOX }} deployment-report send
      - name: Destroy Deployment Admin
        if: '${{ env.RUN_TF_DEPLOY == ''true'' && always() }}'
        run: '${{ env.TOOLBOX }} terraform destroy -g admin'
