# Config ID: issues.mentions
# 
# This configuration file is auto-generated
# by http://github.com/otto-ec/assets_protecty.
# 
# Do not modify this file unless you know what you do.
# All changes will be overwritten during next update run.
# 
# If you need to modify this file permanently then place your configuration overrides in
# - .github/gitty.yml#/configs/issues/mentions,
# 
# and use the schema appropriate to this file.
# See http://github.com/otto-ec/assets_protecty#readme for more details and documentation.
# 
# This config can be affected by these presets: non-assets
# 
name: Issue Mention Assets
"on":
  issues:
    types:
      - opened
      - reopened
      - edited
  issue_comment:
    types:
      - created
      - edited
  pull_request:
    types:
      - opened
      - reopened
      - edited
  pull_request_target:
    types:
      - opened
      - reopened
      - edited
jobs:
  process:
    runs-on: ubuntu-latest
    if: |-
      ${{ 
        !startsWith(github.event.pull_request.user.login, 'dependabot') 
        && !startsWith(github.event.repository.name, 'assets_')
      }}
    steps:
      - name: Extract event data
        id: extract
        env:
          PRBODY: ${{ github.event.pull_request.body }}
          ISBODY: ${{ github.event.issue.body }}
          CMBODY: ${{ github.event.comment.body }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]] ||
              [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            BODY=$PRBODY
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            BODY=$ISBODY
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            BODY=$CMBODY
          else
            BODY=""
          fi

          echo "Escape Body Content: $BODY"
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "Escaped Body Content: $BODY"
          echo "::set-output name=body::${BODY}"
      - name: Search for team or member mentioned
        id: mentions
        env:
          BODY: ${{ steps.extract.outputs.body }}
        run: >
          echo "Search for mentions"

          NAMES=$(echo "${BODY}" | grep -oP
          '(^|[^`\w])@([\w-_]+\/)?[\w-_]+([^`\w]|$)' | grep -oP
          '(?<=@)([\w-_]+\/)?[\w-_]+' || true)

          MENTIONS=$(echo $NAMES | jq -sRMcr 'split("\n") | map(select(. != ""))
          | join(",")')

          echo "Found Mentions: ${MENTIONS:-'none'}"

          if [[ "${MENTIONS}" != "" ]]; then
            echo "Output Mentions: ${MENTIONS}"
            echo "::set-output name=mentions::${MENTIONS}"
          else
            echo "Mo Mentions found"
          fi
      - uses: jurijzahn8019/action-is-issue-on-board@v0.0.45
        id: isOnBoard
        if: >-
          ${{ steps.mentions.outputs.mentions && steps.mentions.outputs.mentions
          != '' }}
        env:
          MENTIONS: ${{ steps.mentions.outputs.mentions }}
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          owner: ${{ github.repository_owner }}
          board: Team Assets
          repo: ${{ github.event.repository.name }}
          number: ${{ github.event.issue.number }}
      - uses: jurijzahn8019/action-is-user-member-of-teams@v0.0.50
        id: isMember
        if: |-
          ${{ 
            steps.mentions.outputs.mentions 
            && steps.mentions.outputs.mentions != ''
            && !contains(steps.mentions.outputs.mentions, 'otto-ec/assets') 
            && steps.isOnBoard.outputs.isOnBoard != 'true'
          }}
        env:
          MENTIONS: ${{ steps.mentions.outputs.mentions }}
          ONBOARD: ${{ steps.isOnBoard.outputs.isOnBoard }}
          DEBUG: action-is-user-member-of-teams*
          DEBUG_DEPTH: "9"
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          username: ${{ steps.mentions.outputs.mentions }}
          teams: otto-ec/assets
      - uses: alex-page/github-project-automation-plus@v0.8.1
        id: automation
        if: |-
          ${{ 
            steps.isOnBoard.outputs.isOnBoard != 'true'
            && (
                steps.isMember.outputs.ismember == 'true' 
                || contains(steps.mentions.outputs.mentions, 'otto-ec/assets')
              )
          }}
        env:
          MENTIONS: ${{ steps.mentions.outputs.mentions }}
          ONBOARD: ${{ steps.isOnBoard.outputs.isOnBoard }}
          ISMEMBER: ${{ steps.isMember.outputs.ismember }}
        with:
          project: Team Assets
          column: To do
          repo-token: ${{ secrets.TOKEN_GITHUB }}
      - name: Add Label to the issue
        id: labeler
        uses: actions-ecosystem/action-add-labels@v1.1.3
        if: |-
          ${{
            !contains(github.event.issue.labels.*.name, 'help wanted')
            && !contains(github.event.pull_request.labels.*.name, 'help wanted')
            && (
              steps.isOnBoard.outputs.isOnBoard == 'true'
              || steps.isMember.outputs.ismember == 'true' 
              || contains(steps.mentions.outputs.mentions, 'otto-ec/assets')
            )
          }}
        env:
          MENTIONS: ${{ steps.mentions.outputs.mentions }}
          ONBOARD: ${{ steps.isOnBoard.outputs.isOnBoard }}
          ISMEMBER: ${{ steps.isMember.outputs.ismember }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: help wanted
